Most of the current test files only use the default synthesizer. Creatively titled PySynth “A” by the documentation. 
However, this is not the only synth there is. 
The documentation, here: https://mdoege.github.io/PySynth has a list of the synthesizers as well as demo audio clips for all of them.
I encourage you to check them out. However, most of the other synthesizers require another library called NumPy. 
It may not be neccessary now, but in order to add an additional sound or two,
such as (electric piano, or plucked strings, as described one again by the author), we would need it. 
Regardless, I will create a couple of tests with the different ones, 
(once I figure out how to install NumPy. Hopefully it doesn't take me an hour this time.) so you can see the differnce in importing,
as well as the different sounds (assuming you install it too). 
The functionality is the same though, so if you change the import statement, 
you should be able to run every test with every different synthesizer.

###############UPDATE#####################

Since, this is the python two version, and development on it has stopped, it's not perfect.
This was demonstrated when I installed NumPy and attempted to run the now enabled synthesizers.
I got one error. After digging around I found that is was caused by one line of code that input a float where an int was needed.
Once I cast the value to an int, everything was fine. However, I then realized that I would have to do this for every synthesizer.
And that it could be a very large annoyance. But, it does work.
Also, I found out that pySynth does in fact have a method for mixing files, so it will be possible to produce chords.
